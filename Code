#include <SoftwareSerial.h>
#include <TinyGPS++.h>

#define buttonPin 2
#define heartbeatPin A0
#define temperaturePin A1
#define confirmationPin 7
#define pressurePin A5
#define buzzerPin 9
#define irSensorPin 8

SoftwareSerial gsmSerial(5, 4);
SoftwareSerial gpsSerial(3, 0);
TinyGPSPlus gps;

String phoneNumber = "+1234567890";
float latitude = 40.712776, longitude = -74.005974;

int heartbeatThresholdLow = 50, heartbeatThresholdHigh = 120;
float temperatureThresholdLow = 10.0, temperatureThresholdHigh = 40.0;
int pressureThreshold = 500;

bool emergencyTriggered = false, awaitingConfirmation = false, buzzerActive = false;
unsigned long confirmationStartTime = 0;
const unsigned long confirmationTimeout = 300;

void setup() {
  Serial.begin(9600);
  gsmSerial.begin(9600);
  gpsSerial.begin(9600);

  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(confirmationPin, INPUT_PULLUP);
  pinMode(buzzerPin, OUTPUT);
  pinMode(heartbeatPin, INPUT);
  pinMode(temperaturePin, INPUT);
  pinMode(pressurePin, INPUT);
  pinMode(irSensorPin, INPUT);

  sendMessage("System Ready - Women Safety System Activated");
  Serial.println("Women Safety System Initialized.");
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    emergencyTriggered = true;
    Serial.println("Emergency Triggered! Button pressed.");
    sendEmergencyMessageWithLocation();
  }

  while (gpsSerial.available() > 0) {
    gps.encode(gpsSerial.read());
    if (gps.location.isUpdated()) {
      latitude = gps.location.lat();
      longitude = gps.location.lng();
    }
  }

  int heartbeat = analogRead(heartbeatPin);
  float voltage = (analogRead(temperaturePin) / 1023.0) * 5.0;
  float temperature = voltage * 100.0;

  float pressureVoltage = (analogRead(pressurePin) / 1023.0) * 5.0;
  int pressure1 = pressureVoltage * 100.0;

  bool motionDetected = digitalRead(irSensorPin) == HIGH;
  bool abnormal = (heartbeat < heartbeatThresholdLow || heartbeat > heartbeatThresholdHigh ||
                   temperature < temperatureThresholdLow || temperature > temperatureThresholdHigh ||
                   pressure1 > pressureThreshold || motionDetected);

  if (emergencyTriggered || abnormal) {
    if (!awaitingConfirmation) {
      awaitingConfirmation = true;
      confirmationStartTime = millis();
      sendMessage("Emergency! Press the confirmation button to CANCEL sending location.");
    }
  }

  if (awaitingConfirmation && digitalRead(confirmationPin) == LOW) {
    resetSystem();
    Serial.println("Emergency cancelled.");
  }

  if (awaitingConfirmation && (millis() - confirmationStartTime >= confirmationTimeout)) {
    awaitingConfirmation = false;
    Serial.println("Timeout. Sending emergency message.");
    sendEmergencyMessageWithLocation();
    emergencyTriggered = false;
  }

  if (pressure1 > pressureThreshold) {
    digitalWrite(buzzerPin, HIGH);
    delay(500);
    digitalWrite(buzzerPin, LOW);
    emergencyTriggered = false;
  }

  Serial.print("Heartbeat: "); Serial.println(heartbeat);
  Serial.print("Temp: "); Serial.println(temperature);
  Serial.print("Pressure: "); Serial.println(pressure1);
  Serial.print("Motion: "); Serial.println(motionDetected);
  delay(100);
}

void sendMessage(String msg) {
  gsmSerial.println("AT+CMGF=1");
  delay(100);
  gsmSerial.print("AT+CMGS=\""); gsmSerial.print(phoneNumber); gsmSerial.println("\"");
  delay(100); gsmSerial.println(msg); delay(100); gsmSerial.write(26); delay(100);
}

void getGPSLocation(float &lat, float &lon) {
  Serial.print("Lat: "); Serial.print(lat, 6);
  Serial.print(" Lon: "); Serial.println(lon, 6);
}

void sendEmergencyMessageWithLocation() {
  sendMessage("Emergency! Location being sent.");
  getGPSLocation(latitude, longitude);
  String msg = "Emergency! Latitude: " + String(latitude, 6) + ", Longitude: " + String(longitude, 6);
  sendMessage(msg);
}

void resetSystem() {
  emergencyTriggered = false;
  awaitingConfirmation = false;
  confirmationStartTime = 0;
  buzzerActive = false;
  digitalWrite(buzzerPin, LOW);
  sendMessage("System Ready - Women Safety System Activated");
  Serial.println("System reset and re-initialized.");
}
